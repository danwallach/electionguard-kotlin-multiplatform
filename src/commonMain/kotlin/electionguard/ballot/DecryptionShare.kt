package electionguard.ballot

import electionguard.core.ElementModP
import electionguard.core.GenericChaumPedersenProof

class DecryptionShare {

    /**
     * A Guardian's Partial Decryption of a selection.  A CiphertextDecryptionSelection
     * can be generated by a guardian directly, or it can be compensated for by a quorum of guardians
     *
     * When the guardian generates this share directly, the `proof` field is populated with
     * a `chaumPedersen` proof that the decryption share was generated correctly.
     *
     * When the share is generated on behalf of this guardian by other guardians, the `recovered_parts`
     * collection is populated with the `CiphertextCompensatedDecryptionSelection` objects generated
     * by each available guardian.
     *
     * So CiphertextDecryptionSelection either has a proof or recoveredParts
     *
     * @param guardianId     The Guardian that this share belongs to, is available or missing.
     * @param share           The Share of the decryption of a selection. `M_i` in the spec.
     * @param proof           For available guardians, proof that the share was decrypted correctly.
     * @param recoveredParts  For missing guardians, keyed by available guardian_id.
     */
    data class CiphertextDecryptionSelection(
        val selectionId: String, // matches SelectionDescription.selectionId
        val guardianId : String,
        val share: ElementModP,
        val proof : GenericChaumPedersenProof?,
        val recoveredParts: Map<String, CiphertextCompensatedDecryptionSelection>?)  // map<guardianId, selection>

    /**
     * A compensated fragment of a Guardian's Partial Decryption of a selection generated by an available guardian.
     *
     * @param guardianId         The Available Guardian that this share belongs to
     * @param missingGuardianId The Missing Guardian for whom this share is calculated on behalf of
     * @param share               The share of the decryption of a selection. M_il in the spec.
     * @param recoveryKey        The available guardian's share of the missing_guardian's public key.
     * @param proof               The proof that the share was decrypted correctly.
     */
    data class CiphertextCompensatedDecryptionSelection(
        val selectionId: String, // matches SelectionDescription.selectionId
        val guardianId : String,
        val missingGuardianId : String,
        val share : ElementModP,
        val recoveryKey : ElementModP,
        val proof : GenericChaumPedersenProof )

}